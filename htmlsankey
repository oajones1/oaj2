<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Sankey Diagram</title>
  <meta name="description" content="A Sankey diagram with the thickness of links indicating the flow quantity." />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Copyright 1998-2019 by Northwoods Software Corporation. -->

  <script src="../release/go.js"></script>
  <script src="../assets/js/goSamples.js"></script>  <!-- this is only for the GoJS Samples framework -->
  <script id="code">
    function SankeyLayout() {
      go.LayeredDigraphLayout.call(this);
    }
    go.Diagram.inherit(SankeyLayout, go.LayeredDigraphLayout);
    // Before creating the LayeredDigraphNetwork of vertexes and edges,
    // determine the desired height of each node (Shape).
    SankeyLayout.prototype.createNetwork = function() {
      this.diagram.nodes.each(function(node) {
        var height = getAutoHeightForNode(node);
        var font = "bold " + Math.max(12, Math.round(height / 8)) + "pt Segoe UI, sans-serif"
        var shape = node.findObject("SHAPE");
        var text = node.findObject("TEXT");
        var ltext = node.findObject("LTEXT");
        if (shape) shape.height = height;
        if (text) text.font = font;
        if (ltext) ltext.font = font;
      });
      return go.LayeredDigraphLayout.prototype.createNetwork.call(this);
    };
    function getAutoHeightForNode(node) {
      var heightIn = 0;
      var it = node.findLinksInto()
      while (it.next()) {
        var link = it.value;
        heightIn += link.computeThickness();
      }
      var heightOut = 0;
      var it = node.findLinksOutOf()
      while (it.next()) {
        var link = it.value;
        heightOut += link.computeThickness();
      }
      var h = Math.max(heightIn, heightOut);
      if (h < 10) h = 10;
      return h;
    };
    // treat dummy vertexes as having the thickness of the link that they are in
    SankeyLayout.prototype.nodeMinColumnSpace = function(v, topleft) {
      if (v.node === null) {
        if (v.edgesCount >= 1) {
          var max = 1;
          var it = v.edges;
          while (it.next()) {
            var edge = it.value;
            if (edge.link != null) {
              var t = edge.link.computeThickness();
              if (t > max) max = t;
              break;
            }
          }
          return Math.ceil(max / this.columnSpacing);
        }
        return 1;
      }
      return go.LayeredDigraphLayout.prototype.nodeMinColumnSpace.call(this, v, topleft);
    }
    SankeyLayout.prototype.assignLayers = function() {
      go.LayeredDigraphLayout.prototype.assignLayers.call(this);
      var maxlayer = this.maxLayer;
      // now make sure every vertex with no outputs is maxlayer
      for (var it = this.network.vertexes.iterator; it.next();) {
        var v = it.value;
        var node = v.node;
        if (v.destinationVertexes.count == 0) {
          v.layer = 0;
        }
        if (v.sourceVertexes.count == 0) {
          v.layer = maxlayer;
        }
      }
      // from now on, the LayeredDigraphLayout will think that the Node is bigger than it really is
      // (other than the ones that are the widest or tallest in their respective layer).
    };
    SankeyLayout.prototype.commitLayout = function() {
      go.LayeredDigraphLayout.prototype.commitLayout.call(this);
      for (var it = this.network.edges.iterator; it.next();) {
        var link = it.value.link;
        if (link && link.curve === go.Link.Bezier) {
          // depend on Link.adjusting === go.Link.End to fix up the end points of the links
          // without losing the intermediate points of the route as determined by LayeredDigraphLayout
          link.invalidateRoute();
        }
      }
    };
    // end of SankeyLayout
    function init() {
      if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
      var $ = go.GraphObject.make;  // for conciseness in defining templates
      myDiagram =
        $(go.Diagram, "myDiagramDiv", // the ID of the DIV HTML element
          {
            initialAutoScale: go.Diagram.UniformToFill,
            "animationManager.isEnabled": false,
            layout: $(SankeyLayout,
              {
                setsPortSpots: false,  // to allow the "Side" spots on the nodes to take effect
                direction: 0,  // rightwards
                layeringOption: go.LayeredDigraphLayout.LayerOptimalLinkLength,
                packOption: go.LayeredDigraphLayout.PackStraighten || go.LayeredDigraphLayout.PackMedian,
                layerSpacing: 150,  // lots of space between layers, for nicer thick links
                columnSpacing: 1
              })
          });
      var colors = ["#AC193D/#BF1E4B", "#2672EC/#2E8DEF", "#8C0095/#A700AE", "#5133AB/#643EBF", "#008299/#00A0B1", "#D24726/#DC572E", "#008A00/#00A600", "#094AB2/#0A5BC4"];
      // this function provides a common style for the TextBlocks
      function textStyle() {
        return { font: "bold 12pt Segoe UI, sans-serif", stroke: "black", margin: 5 };
      }
      // define the Node template
      myDiagram.nodeTemplate =
        $(go.Node, go.Panel.Horizontal,
          {
            locationObjectName: "SHAPE",
            locationSpot: go.Spot.MiddleLeft,
            portSpreading: go.Node.SpreadingPacked  // rather than the default go.Node.SpreadingEvenly
          },
          $(go.TextBlock, textStyle(),
            { name: "LTEXT" },
            new go.Binding("text", "ltext")),
          $(go.Shape,
            {
              name: "SHAPE",
              figure: "Rectangle",
              fill: "#2E8DEF",  // default fill color
              stroke: null,
              strokeWidth: 0,
              portId: "",
              fromSpot: go.Spot.RightSide,
              toSpot: go.Spot.LeftSide,
              height: 50,
              width: 20
            },
            new go.Binding("fill", "color")),
          $(go.TextBlock, textStyle(),
            { name: "TEXT" },
            new go.Binding("text"))
        );
      function getAutoLinkColor(data) {
        var nodedata = myDiagram.model.findNodeDataForKey(data.from);
        var hex = nodedata.color;
        if (hex.charAt(0) == '#') {
          var rgb = parseInt(hex.substr(1, 6), 16);
          var r = rgb >> 16;
          var g = rgb >> 8 & 0xFF;
          var b = rgb & 0xFF;
          var alpha = 0.4;
          if (data.width <= 2) alpha = 1;
          var rgba = "rgba(" + r + "," + g + "," + b + ", " + alpha + ")";
          return rgba;
        }
        return "rgba(173, 173, 173, 0.25)";
      }
      // define the Link template
      var linkSelectionAdornmentTemplate =
        $(go.Adornment, "Link",
          $(go.Shape,
            { isPanelMain: true, fill: null, stroke: "rgba(0, 0, 255, 0.3)", strokeWidth: 0 })  // use selection object's strokeWidth
        );
      myDiagram.linkTemplate =
        $(go.Link, go.Link.Bezier,
          {
            selectionAdornmentTemplate: linkSelectionAdornmentTemplate,
            layerName: "Background",
            fromEndSegmentLength: 150, toEndSegmentLength: 150,
            adjusting: go.Link.End
          },
          $(go.Shape, { strokeWidth: 4, stroke: "rgba(173, 173, 173, 0.25)" },
            new go.Binding("stroke", "", getAutoLinkColor),
            new go.Binding("strokeWidth", "width"))
        );
      // read in the JSON-format data from the "mySavedModel" element
      load();
    }
    function load() {
      myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
    }
  </script>
</head>
<body onload="init()">
<div id="sample">
  <div id="myDiagramDiv" style="border: solid 1px black; width: 99%; height: 850px"></div>
  <p>
    A Sankey diagram is a type of flow diagram where the Link thickness is proportional to the flow quantity.
  </p>
  <div>
    <div>
      <button onclick="load()">Read</button>
    </div>
    <textarea id="mySavedModel" style="width:100%;height:250px">
{ "class": "go.GraphLinksModel",
  "nodeDataArray": [
{"key":"0", "text":"Coal", "color":"#9d75c2"},
{"key":"1", "text":"Natural Gas", "color":"#9d75c2"},
{"key":"2", "text":"Oil", "color":"#9d75c2"},
{"key":"3", "text":"Bioenergy and waste", "color":"#9d75c2"},
{"key":"4", "text":"Hydro", "color":"#a1e194"},
{"key":"5", "text":"Wind", "color":"#a1e194"},
{"key":"6 "text":"Solar", "color":"#f6bcd5"},
{"key":"7", "text":"Nuclear", "color":"#681313"},
{"key":"8", "text":"Heat", "color":"#3483ba"},
{"key":"9", "text":"Fuel", "color":"#c9b7d8"},
{"key":"10", "text":"Petroleum products", "color":"#fea19f"},
{"key":"11", "text":"Electricity", "color":"#d93c3c"},
{"key":"12", "text":"Loss", "color":"#9d75c2"},
{"key":"13", "text":"Industry", "color":"#9d75c2"},
{"key":"14", "text":"Domestic", "color":"#a6dce6"},
{"key":"15", "text":"Non Energy Use", "color":"#c9a59d"},
{"key":"16", "text":"Other", "color":"#c9a59d"},
{"key":"17", "text":"Transport", "color":"#b5cbe9"},
{"key":"18", "text":"Electricity", "color":"#40a840"}
    ], "linkDataArray": [
[{"from":0,"to":11,"width":1447},
{"from":0,"to":8,"width":4},
{"from":0,"to":9,"width":1259},
{"from":0,"to":16,"width":1003},
{"from":0,"to":13,"width":1027},
{"from":0,"to":17,"width":11},
{"from":0,"to":14,"width":381},
{"from":0,"to":12,"width":2850},
{"from":1,"to":11,"width"11306},
{"from":1,"to":8,"width":2547},
{"from":1,"to":13,"width":13964}
{"from":1,"to":14,"width":34723}
{"from":1,"to":12,"width":12202}
{"from":2,"to":10,"width":63953}
{"from":2,"to":16,"width":443},
{"from":2,"to":12,"width":137},
{"from":3,"to":11,"width":2989},
{"from":3,"to":8,"width":223},
{"from":3,"to":13,"width":1452},
{"from":3,"to":17,"width":1364},
{"from":3,"to":14,"width":3651},
{"from":3,"to":12,"width":7378},
{"from":4,"to":11,"width":472},
{"from":5,"to":11,"width":4894},
{"from":6,"to":11,"width":1106},
{"from":6,"to":14,"width":54},
{"from":7,"to":11,"width":5594},
{"from":7,"to":12,"width":8467},
{"from":9,"to":11,"width":489},
{"from":9,"to":8,"width":1},
{"from":9,"to":13,"width":672},
{"from":9,"to":14,"width":171},
{"from":9,"to":15,"width":48},
{"from":9,"to":12,"width":90},
{"from":9,"to":16,"width":413},
{"from":10,"to":11,"width":91},
{"from":10,"to":8,"width":48},
{"from":10,"to":16,"width":504},
{"from":10,"to":13,"width":6515},
{"from":10,"to":17,"width":55151},
{"from":10,"to":14,"width":6204},
{"from":10,"to":15,"width":8079},
{"from":10,"to":12,"width":344},
{"from":11,"to":18,"width":21938},
{"from":11,"to":13,"width":9998},
{"from":11,"to":12,"width":2293},
{"from":11,"to":17,"width":429},
{"from":11,"to":14,"width":17338},
{"from":8,"to":13,"width":998},
{"from":8,"to":14,"width":586}]}
 ]}
    </textarea>
  </div>
  This sample demonstrates one way of generating a Sankey or flow diagram.
  The data was derived from <a href="https://tamc.github.io/Sankey/">https://tamc.github.io/Sankey/</a>.
</div>
</body>
</html>
